GAS LISTING ulibs.s 			page 1


   1              	# 1 "ulibs.S"
   1              	/*
   0              	
   0              	
   2              	** sccs id:	%W%	%G%
   3              	**
   4              	** File:	ulibs.S
   5              	**
   6              	** Author:	4003-506 class of 20113
   7              	**
   8              	** Contributor:
   9              	**
  10              	** Description:	Assembly implementations of user-level library functions
  11              	*/
  12              	
  13              	#define	__ASM__20113__
  14              	
  15              	#include "syscalls.h"
   1              	/*
   2              	** SCCS ID:	%W%	%G%
   3              	**
   4              	** File:	syscalls.h
   5              	**
   6              	** Author:	4003-506 class of 20113
   7              	**
   8              	** Contributor:
   9              	**
  10              	** Description:	System call module definitions
  11              	*/
  12              	
  13              	#ifndef _SYSCALLS_H
  14              	#define _SYSCALLS_H
  15              	
  16              	#include "headers.h"
   1              	/*
  17              	#include "queues.h"
   1              	/*
  18              	
  19              	#include <x86arch.h>
   1              	/*
  20              	
  16              	
  17              	/*
  18              	** System call stubs
  19              	**
  20              	** All have the same structure:
  21              	**
  22              	**      move a code into EAX
  23              	**      generate the interrupt
  24              	**      return to the caller
  25              	**
  26              	** As these are simple "leaf" routines, we don't use
  27              	** the standard enter/leave method to set up a stack
  28              	** frame - that takes time, and we don't really need it.
  29              	*/
  30              	
  31              	#define SYSCALL(name) \
GAS LISTING ulibs.s 			page 2


  32              		.globl	name              ; \
  33              	name:                             ; \
  34              		movl	$SYS_##name, %eax ; \
  35              		int	$INT_VEC_SYSCALL  ; \
  36              		ret
  37              	
  38              	/*
  39              	** for debugging purposes, this could be changed to expand into
  40              	** (e.g., for write) something like this:
  41              	**
  42              	**      .globl  write
  43              	**      .globl  c_printf
  44              	** write:       movl    $SYS_write, %eax
  45              	**      int     $INT_VEC_SYSCALL
  46              	**      pushl   $write_fmt
  47              	**      call    c_printf
  48              	**      addl    $4, %esp
  49              	**      ret
  50              	** write_fmt: .string "write() is returning to %08x after printing %08x\n"
  51              	*/
  52              	
  53 0000 B8000000 	SYSCALL(fork)
  53      00CD80C3 
  54 0008 B8020000 	SYSCALL(exit)
  54      00CD80C3 
  55 0010 B8040000 	SYSCALL(read)
  55      00CD80C3 
  56 0018 B8050000 	SYSCALL(write)
  56      00CD80C3 
  57 0020 B8030000 	SYSCALL(msleep)
  57      00CD80C3 
  58 0028 B8060000 	SYSCALL(kill)
  58      00CD80C3 
  59 0030 B8070000 	SYSCALL(get_priority)
  59      00CD80C3 
  60 0038 B8080000 	SYSCALL(get_pid)
  60      00CD80C3 
  61 0040 B8090000 	SYSCALL(get_ppid)
  61      00CD80C3 
  62 0048 B80B0000 	SYSCALL(get_time)
  62      00CD80C3 
  63 0050 B80A0000 	SYSCALL(get_state)
  63      00CD80C3 
  64 0058 B80C0000 	SYSCALL(set_priority)
  64      00CD80C3 
  65 0060 B80D0000 	SYSCALL(set_time)
  65      00CD80C3 
  66 0068 B8010000 	SYSCALL(exec)
  66      00CD80C3 
  67              	
  68              	// This is a bogus system call; it's here so that we can test
  69              	// our handling of out-of-range syscall codes in the syscall ISR.
  70              	
  71 0070 B8DEC0AD 	SYSCALL(bogus)
  71      0BCD80C3 
GAS LISTING ulibs.s 			page 3


DEFINED SYMBOLS
             ulibs.S:53     .text:0000000000000000 fork
             ulibs.S:54     .text:0000000000000008 exit
             ulibs.S:55     .text:0000000000000010 read
             ulibs.S:56     .text:0000000000000018 write
             ulibs.S:57     .text:0000000000000020 msleep
             ulibs.S:58     .text:0000000000000028 kill
             ulibs.S:59     .text:0000000000000030 get_priority
             ulibs.S:60     .text:0000000000000038 get_pid
             ulibs.S:61     .text:0000000000000040 get_ppid
             ulibs.S:62     .text:0000000000000048 get_time
             ulibs.S:63     .text:0000000000000050 get_state
             ulibs.S:64     .text:0000000000000058 set_priority
             ulibs.S:65     .text:0000000000000060 set_time
             ulibs.S:66     .text:0000000000000068 exec
             ulibs.S:71     .text:0000000000000070 bogus

NO UNDEFINED SYMBOLS
